openapi: 3.0.0
info:
  title: API server for the demo project "Six Cities".
  description: |-
    * List of available API endpoints and routes for the demo project "Six Cities".
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 1.0.0
tags:
  - name: users
    description: |-
      * User related endpoints.
  - name: offers
    description: |-
      * Offer related endpoints.
  - name: comments
    description: |-
      * Review related endpoints.

paths:
  /users/register:
    post:
      tags:
        - users
      summary: Register a new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUser'
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/login:
    get:
      tags:
        - users
      summary: Check if user is logged in
      description: Requires authentication. The `userId` is derived from the JWT token provided in the `Authorization` header.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User is logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loggedUser'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - users
      summary: Login a user
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/loginUser'
      responses:
        '200':
          description: User successfully logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/favorite:
    patch:
      tags:
        - users
      summary: Add an offer to favorites
      description: Requires authentication. The `userId` is derived from the JWT token provided in the `Authorization` header.
      security:
        - BearerAuth: []
      operationId: addToFavorites
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FavoritesDto'
      responses:
        '200':
          description: Offer added to favorites
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoritesRdo'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - users
      summary: Remove an offer from favorites
      description: Requires authentication. The `userId` is derived from the JWT token provided in the `Authorization` header.
      security:
        - BearerAuth: []
      operationId: removeFromFavorites
      responses:
        '200':
          description: Offer removed from favorites
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoritesRdo'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /offers/favorites:
    get:
      tags:
        - offers
      summary: Get favorite offers by user
      description: Requires authentication. The `userId` is derived from the JWT token provided in the `Authorization` header.
      security:
        - BearerAuth: []
      parameters:
        - name: city
          in: query
          description: Filter favorite offers by city
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Limit the number of favorite offers returned
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: List of favorite offers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OfferListRdo'
  /offers/premium:
    get:
      tags:
        - offers
      summary: Get premium offers by city
      parameters:
        - name: city
          in: query
          description: Filter favorite offers by city
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Limit the number of favorite offers returned
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: List of premium offers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OfferListRdo'
                  
  /offers/{offerId}/comments:
    get:
      tags:
        - offers
      summary: Get comments for an offer
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: Limit the number of favorite offers returned
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: List of comments for the offer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentRdo'
  /offers/{offerId}:
    get:
      tags:
        - offers
      summary: Get an offer by ID
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Offer details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfferRdo'
    patch:
      tags:
        - offers
      summary: Update an offer by ID
      description: Requires authentication. The `userId` is derived from the JWT token provided in the `Authorization` header.
      security:
        - BearerAuth: []
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOfferDto'
      responses:
        '200':
          description: Updated offer details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfferRdo'
    delete:
      tags:
        - offers
      summary: Delete an offer by ID
      description: Requires authentication. The `userId` is derived from the JWT token provided in the `Authorization` header.
      security:
        - BearerAuth: []
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Offer deleted
  /offers/:
    post:
      tags:
        - offers
      summary: Create a new offer
      description: Requires authentication. The `userId` is derived from the JWT token provided in the `Authorization` header.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOfferDto'
      responses:
        '201':
          description: Offer created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfferRdo'
    get:
      tags:
        - offers
      summary: Get all offers
      parameters:
        - name: city
          in: query
          description: Filter favorite offers by city
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Limit the number of favorite offers returned
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: List of all offers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OfferListRdo'
  /comments/:
    post:
      tags:
        - comments
      summary: Create a new comment
      description: Requires authentication. The `userId` is derived from the JWT token provided in the `Authorization` header.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentDto'
      responses:
        '201':
          description: Comment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentRdo'


components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    # Схема для регистрации пользователя
    createUser:
      type: object
      required: [name, email, password, userType]
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 15
        email:
          type: string
          format: email
        avatarPath:
          type: string
          nullable: true
        password:
          type: string
          minLength: 6
          maxLength: 12
        userType:
          type: string
          enum: ["pro", "regular"]

    # Схема для входа пользователя
    loginUser:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    # Общая схема пользователя для ответов
    user:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        avatarPath:
          type: string
          nullable: true
        userType:
          type: string
          enum: ["pro", "regular"]
    
    loggedUser:
      type: object
      properties:
        email:
          type: string

    # Схема для ошибок
    Error:
      type: object
      properties:
        message:
          type: string
        code:
          type: integer
          format: int32
    
    # Схема для операций с избранными
    FavoritesDto:
      type: object
      required:
        - offerId
      properties:
        offerId:
          type: string
          format: mongoId
          
    # Схема ответа для операций с избранными
    FavoritesRdo:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        favoriteOffers:
          type: array
          items:
            type: string
    
    # Схема для создания предложения
    CreateOfferDto:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        city:
          type: string
        previewImage:
          type: string
        photos:
          type: array
          items:
            type: string
        isPremium:
          type: boolean
        type:
          type: string
        rooms:
          type: integer
        guests:
          type: integer
        cost:
          type: integer
        amenities:
          type: array
          items:
            type: string
        coordinates:
          type: object
          properties:
            latitude:
              type: number
              format: double
            longitude:
              type: number
              format: double
      required: [title, description, city, previewImage, isPremium, type, rooms, guests, cost, amenities, coordinates]

    # Схема для обновления предложения
    UpdateOfferDto:
      allOf:
        - $ref: '#/components/schemas/CreateOfferDto'
        - type: object
          properties:
            title:
              type: string

    # Схема для ответа предложения
    OfferRdo:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        city:
          type: string
        previewImage:
          type: string
        photos:
          type: array
          items:
            type: string
        isPremium:
          type: boolean
        isFavorite:
          type: boolean
        rating:
          type: number
          format: float
        type:
          type: string
        rooms:
          type: integer
        guests:
          type: integer
        cost:
          type: integer
        amenities:
          type: array
          items:
            type: string
        author:
          $ref: '#/components/schemas/user'
        commentsCount:
          type: integer
        coordinates:
          type: object
          properties:
            latitude:
              type: number
              format: double
            longitude:
              type: number
              format: double
      required: [id, title, description, createdAt, city, previewImage, photos, isPremium, isFavorite, rating, type, rooms, guests, cost, amenities, author, commentsCount, coordinates]

    # Схема для списка предложений
    OfferListRdo:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the offer
        title:
          type: string
          description: Title of the offer
        cost:
          type: integer
          description: Cost of the offer
        type:
          type: string
          description: Type of the offer
        isFavorite:
          type: boolean
          description: Indicates if the offer is marked as favorite
        createdAt:
          type: string
          format: date-time
          description: Creation date of the offer
        city:
          type: string
          description: City where the offer is located
        previewImage:
          type: string
          description: URL to the preview image of the offer
        isPremium:
          type: boolean
          description: Indicates if the offer is a premium offer
        rating:
          type: number
          format: float
          description: Rating of the offer
        commentsCount:
          type: integer
          description: Number of comments on the offer
        author:
          $ref: '#/components/schemas/user'
      required: [id, title, cost, type, isFavorite, createdAt, city, previewImage, isPremium, rating, commentsCount]

    CommentRdo:
      type: object
      properties:
        id:
          type: string
        text:
          type: string
        rating:
          type: number
        createdAt:
          type: string
          format: date-time
        author:
          $ref: '#/components/schemas/user'

    CommentDto:
      type: object
      properties:
        text:
          type: string
        rating:
          type: number
        offerId:
          type: string
      required: [text, rating, offerId]